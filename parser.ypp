%{
#include <iostream>
#include "hw3_output.hpp"
#include "ProgramTypes.hpp"
extern int yylex();
extern int yylineno;
extern StackTable stackTable;
int yyerror(const char *s);
#define YYSTYPE Node*  // Define YYSTYPE as a pointer to Node
%}

%union {
    Node* node;  // Define YYSTYPE as a union with a Node* member
}


%token INT BYTE B BOOL TRUE FALSE IF RETURN WHILE BREAK CONTINUE SC ID NUM STRING
%type <node> Program Statements Statement Call Type Exp

%right ASSIGN 
%left OR
%left AND
%left ISEQUAL
%left RELOP
%left ADD SUB
%left MULTIPLY DIVIDE
%right ELSE
%right NOT
%left LPAREN RPAREN LBRACE RBRACE 

%%
Program: Statements                                                    { stackTable.popScope(); }                                                                               
Statements: Statement                                                  { $$ = new Statements(dynamic_cast<Statement*>($1)); }
            | Statements Statement                                     { $$ = new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2)); } 
                                                                        
Statement: LBRACE ADDSCOPE Statements REMOVESCOPE RBRACE               { $$ = new Statement(dynamic_cast<Statements*>($3)); } 
            | Type ID SC                                               { $$ = new Statement($1, $2); }
            | Type ID ASSIGN Exp SC                                    { $$ = new Statement($1, $2, dynamic_cast<Exp*>($4), true); } 
            | ID ASSIGN Exp SC                                         { $$ = new Statement($1, dynamic_cast<Exp*>($3)); } 
            | Call SC                                                  { $$ = new Statement(dynamic_cast<Call*>($1)); }
            | RETURN SC                                                {} 
            | IF LPAREN Exp RPAREN ADDSCOPE Statement %prec IF                  
                                                                       { $$ = new Statement(null, dynamic_cast<Exp*>($3), false); stackTable.popScope(); }
            | IF LPAREN Exp RPAREN ADDSCOPE Statement ELSE Statement            
                                                                       { $$ = new Statement(null, dynamic_cast<Exp*>($3), false); stackTable.popScope(); }
            | WHILE LPAREN Exp RPAREN ADDSCOPE Statement                        
                                                                       { $$ = new Statement(null, dynamic_cast<Exp*>($3), false); stackTable.popScope(); } 
            | BREAK SC                                                 { $$ = new Statement(dynamic_cast<Node*>($1)->getValue())}
            | CONTINUE SC                                              { $$ = new Statement(dynamic_cast<Node*>($1)->getValue())}

Call:   ID LPAREN Exp RPAREN                                           { $$ = new Call($1, dynamic_cast<Exp*>($3));} 

Type:   INT                                                            { $$ = new Type("INT") }
        | BYTE                                                         { $$ = new Type("BYTE") } 
        | BOOL                                                         { $$ = new Type("BOOL") }

Exp:    LPAREN Exp RPAREN                                              { $$ = new Exp(dynamic_cast<Exp*>($2)); }      
        | Exp ADD Exp                                                  { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "BINOP"); }
        | Exp SUB Exp                                                  { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "BINOP"); } 
        | Exp DIVIDE Exp                                               { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "BINOP"); }
        | Exp MULTIPLY Exp                                             { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "BINOP"); }
        | ID                                                           { $$ = new Exp($1, 2); } 
        | Call                                                         { $$ = new Exp(dynamic_cast<Call*>($1)); }
        | NUM                                                          { $$ = new Exp($1, INT); }
        | NUM B                                                        { $$ = new Exp($1, BYTE); }
        | STRING                                                       { $$ = new Exp($1, STRING); }
        | TRUE                                                         { $$ = new Exp($1, BOOL); }
        | FALSE                                                        { $$ = new Exp($1, BOOL); }
        | NOT Exp                                                      { $$ = new Exp(dynamic_cast<Exp*>($2), true); }
        | Exp AND Exp                                                  { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "RELOP"); } 
        | Exp OR Exp                                                   { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "RELOP"); }
        | Exp ISEQUAL Exp                                              { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "RELOP"); }
        | Exp RELOP Exp                                                { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "RELOP"); }
        | LPAREN Type RPAREN Exp                                       { $$ = new Exp(dynamic_cast<Exp*>($4), $2); }

;
///pushScope///
ADDSCOPE:                                                               {
                                                                            stackTable.pushScope(false,null)
                                                                        }
;
///popScope///
REMOVESCOPE:                                                            {
                                                                            stackTable.popScope()
                                                                        }
;
%%
StackTable stackTable = StackTable();

int yyerror(const char *s) {
    output::errorSyn(yylineno);
    exit(0);
    }

int main() {
    return yyparse();
}

